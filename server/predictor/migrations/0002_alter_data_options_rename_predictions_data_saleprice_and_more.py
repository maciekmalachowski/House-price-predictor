# Generated by Django 4.0.4 on 2022-05-08 14:46

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('predictor', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='data',
            options={},
        ),
        migrations.RenameField(
            model_name='data',
            old_name='predictions',
            new_name='SalePrice',
        ),
        migrations.RemoveField(
            model_name='data',
            name='age',
        ),
        migrations.RemoveField(
            model_name='data',
            name='date',
        ),
        migrations.RemoveField(
            model_name='data',
            name='height',
        ),
        migrations.RemoveField(
            model_name='data',
            name='name',
        ),
        migrations.RemoveField(
            model_name='data',
            name='sex',
        ),
        migrations.AddField(
            model_name='data',
            name='BedroomAbvGr',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='BldgType',
            field=models.CharField(choices=[(0, 'Single-family Detached'), (1, 'Two-family Conversion; originally built as one-family dwelling'), (2, 'Duplex'), (4, 'Townhouse End Unit'), (3, 'Townhouse Inside Unit')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='BsmtFullBath',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='BsmtQual',
            field=models.CharField(choices=[(0, 'Excellent (100+ inches)'), (2, 'Good (90-99 inches)'), (3, 'Typical (80-89 inches)'), (1, 'Fair (70-79 inches)')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='CentralAir',
            field=models.CharField(choices=[(1, 'Yes'), (0, 'No')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='Electrical',
            field=models.CharField(choices=[(4, 'Standard Circuit Breakers & Romex'), (0, 'Fuse Box over 60 AMP and all Romex wiring (Average)'), (1, '60 AMP Fuse Box and mostly Romex wiring (Fair)'), (2, '60 AMP Fuse Box and mostly knob & tube wiring (poor)'), (3, 'Mixed')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='FirstFlrSF',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='Foundation',
            field=models.CharField(choices=[(0, 'Brick & Tile'), (1, 'Cinder Block'), (2, 'Poured Contrete'), (3, 'Slab'), (4, 'Stone'), (5, 'Wood')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='FullBath',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='GarageArea',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='GarageType',
            field=models.CharField(choices=[(1, 'Attached to home'), (2, 'Basement Garage'), (3, 'Built-In (Garage part of house - typically has room above garage)'), (4, 'Car Port'), (5, 'Detached from home'), (0, 'More than one type of garage')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='HeatingQC',
            field=models.CharField(choices=[(0, 'Excellent'), (2, 'Good'), (4, 'Average/Typical'), (1, 'Fair'), (3, 'Poor')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='HouseStyle',
            field=models.CharField(choices=[(2, 'One story'), (0, 'One and one-half story: 2nd level finished'), (1, 'One and one-half story: 2nd level unfinished'), (5, 'Two story'), (3, 'Two and one-half story: 2nd level finished'), (4, 'Two and one-half story: 2nd level unfinished'), (6, 'Split Foyer'), (7, 'Split Level')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='KitchenAbvGr',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='LotArea',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='LotShape',
            field=models.CharField(choices=[(3, 'Regular'), (0, 'Slightly irregular'), (1, 'Moderately Irregular'), (2, 'Irregular')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='Neighborhood',
            field=models.CharField(choices=[(0, 'Bloomington Heights'), (1, 'Bluestem'), (2, 'Briardale'), (3, 'Brookside'), (4, 'Clear Creek'), (5, 'College Creek'), (6, 'Crawford'), (7, 'Edwards'), (8, 'Gilbert'), (9, 'Iowa DOT and Rail Road'), (10, 'Meadow Village'), (11, 'Mitchell'), (12, 'Northwest Ames'), (13, 'Northpark Villa'), (14, 'North Ames'), (15, 'Northridge'), (16, 'Northridge Heights'), (17, 'Old Town'), (18, 'South & West of Iowa State University'), (19, 'Sawyer'), (20, 'Sawyer West'), (21, 'Somerset'), (22, 'Stone Brook'), (23, 'Timberland'), (24, 'Veenker')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='OpenPorchSF',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='PavedDrive',
            field=models.CharField(choices=[(2, 'Paved '), (1, 'Partial Pavement'), (0, 'Dirt/Gravel')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='PoolArea',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='RoofMatl',
            field=models.CharField(choices=[(0, 'Clay or Tile'), (1, 'Standard (Composite) Shingle'), (2, 'Membrane'), (3, 'Metal'), (4, 'Roll'), (5, 'Gravel & Tar'), (6, 'Wood Shakes'), (7, 'Wood Shingles')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='RoofStyle',
            field=models.CharField(choices=[(0, 'Flat'), (1, 'Gable'), (2, 'Gabrel (Barn)'), (3, 'Hip'), (4, 'Mansard'), (5, 'Shed')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='SecondFlrSF',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='Street',
            field=models.CharField(choices=[(1, 'Gravel'), (0, 'Paved')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='data',
            name='TotRmsAbvGrd',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='data',
            name='TotalBsmtSF',
            field=models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
    ]
